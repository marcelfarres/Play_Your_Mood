package enobioDSP

//package main

import (
	"math"
)

// FIR is a slice that defines Filter coeficients.
type FIR struct {
	// Weights returns the slice of weights.
	// Weights() []float64
	Weights []float64
}

// Campture is a slice of samples.
type Capture struct {
	// A = Amplitude returns the slice of signal amplitude.
	Amplitude []float64
	R         float64
	Max       float64
	Min       float64
	Sample    float64
}

// Global package
var MoodFilter FIR
var MoodStandarizationFilter FIR

func MoodBPFSample(c *Capture, fir *FIR) (sample float64) {
	// Apply a FIR filter coefficient
	n := len(fir.Weights)
	// Fast return
	// Capture does not have required number od samples
	if len(c.Amplitude) < n {
		return 0
	}
	sample = 0
	for i := 0; i < n; i++ {
		sample = sample + c.Amplitude[i]*fir.Weights[i]
	}
	return sample
}

func MoodNormSample(c *Capture) (sample float64) {
	// Apply a FIR filter coefficient
	n := len(MoodFilter.Weights)
	m := len(MoodStandarizationFilter.Weights)

	// Fast return
	// Capture does not have required number of samples
	if len(c.Amplitude) < n {
		return 0
	}

	var acc float64
	acc = 0
	// 0 => Old sample
	// Filter is simetric not require inversion
	k := 0
	for i := n - 1; i > 0; i-- {
		acc = acc + c.Amplitude[(m-1)-k]*MoodFilter.Weights[i]
		k++
	}
	sample = acc
	c.Sample = sample

	// 0 => Old sample
	// Filter is simetric not require inversion
	//acc = 0.0
	//for i := m - 1; i > 0; i-- {
	//	acc = acc + c.Amplitude[i]*MoodStandarizationFilter.Weights[i]
	//}

	// Max radius
	if acc > c.Max {
		c.Max = acc
		if c.Max > c.R {
			c.R = c.Max
		}
	}
	// Min & Radius
	if acc < c.Min {
		c.Min = acc
		if math.Abs(c.Min) > c.R {
			c.R = math.Abs(c.Min)
		}
	}

	// Normalize
	if math.Abs(sample) < c.R {
		return sample / c.R
	} else {
		if sample > 0 {
			return 1
		} else {
			return -1
		}
	}

}

func MoodAppend(c *Capture, sample float64) {
	n := len(c.Amplitude)
	copy(c.Amplitude[:n-1], c.Amplitude[1:])
	c.Amplitude[n-1] = sample
}

func MoodSetFilters() {
	// Set filter
	MoodFilter = MoodLPFShort()
	MoodStandarizationFilter = MoodLPFLong()
}

// slide with the BPF coeficccient
func MoodBPF() (bpf FIR) {
	//http://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.firwin.html#scipy.signal.firwin
	//>>> from scipy import signal
	//>>> numtaps = 64
	//>>> window =  signal.get_window('hamming', 64)
	//>>> pass_zero = False
	//>>> nyq = 2
	//>>> f1 = 1./ 10
	//>>> f2 = 1./ 30
	//>>> fir = signal.firwin(numtaps, [f1, f2],pass_zero = pass_zero)
	fir := [64]float64{
		-0.00036654, -0.00013417, 0.00015024, 0.00050861, 0.0009492,
		0.00145387, 0.00196926, 0.0024045, 0.00263739, 0.00252959,
		0.00194958, 0.00080089, -0.00094856, -0.00324077, -0.00591034,
		-0.00867995, -0.01117124, -0.01293192, -0.01347777, -0.01234556,
		-0.00915132, -0.00364692, 0.00423247, 0.01433693, 0.0262916,
		0.0395107, 0.05323597, 0.06659648, 0.07868416, 0.08863713,
		0.09572185, 0.09940465, 0.09940465, 0.09572185, 0.08863713,
		0.07868416, 0.06659648, 0.05323597, 0.0395107, 0.0262916,
		0.01433693, 0.00423247, -0.00364692, -0.00915132, -0.01234556,
		-0.01347777, -0.01293192, -0.01117124, -0.00867995, -0.00591034,
		-0.00324077, -0.00094856, 0.00080089, 0.00194958, 0.00252959,
		0.00263739, 0.0024045, 0.00196926, 0.00145387, 0.0009492,
		0.00050861, 0.00015024, -0.00013417, -0.0003665,
	}

	bpf.Weights = fir[:]
	return
}

// slide with the LPF coeficccient
func MoodLPFShort() (lpf FIR) {
	//http://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.firwin.html#scipy.signal.firwin
	//import pylab as py
	//from scipy import signal
	//# LPF
	//numtaps = 64
	//f1 = 1./ 10.
	//lpf = signal.firwin(numtaps,f1)
	//w, h = signal.freqz(lpf)
	//py.plot(w, 20 * np.log10(abs(h)), 'b')
	fir := [64]float64{
		-0.00036654, -0.00013417, 0.00015024, 0.00050861, 0.0009492,
		0.00145387, 0.00196926, 0.0024045, 0.00263739, 0.00252959,
		0.00194958, 0.00080089, -0.00094856, -0.00324077, -0.00591034,
		-0.00867995, -0.01117124, -0.01293192, -0.01347777, -0.01234556,
		-0.00915132, -0.00364692, 0.00423247, 0.01433693, 0.0262916,
		0.0395107, 0.05323597, 0.06659648, 0.07868416, 0.08863713,
		0.09572185, 0.09940465, 0.09940465, 0.09572185, 0.08863713,
		0.07868416, 0.06659648, 0.05323597, 0.0395107, 0.0262916,
		0.01433693, 0.00423247, -0.00364692, -0.00915132, -0.01234556,
		-0.01347777, -0.01293192, -0.01117124, -0.00867995, -0.00591034,
		-0.00324077, -0.00094856, 0.00080089, 0.00194958, 0.00252959,
		0.00263739, 0.0024045, 0.00196926, 0.00145387, 0.0009492,
		0.00050861, 0.00015024, -0.00013417, -0.0003665,
	}

	lpf.Weights = fir[:]
	return
}

// slide with the BPF coeficccient
func MoodLPFLong() (lpf FIR) {
	//>>> numtamps = 256
	//>>> f1 = 1./60
	//>>> fir = signal.firwin(numtaps,f1)
	fir := [256]float64{
		-4.47161718e-05, -3.91913150e-05, -3.36469731e-05,
		-2.80228441e-05, -2.22563515e-05, -1.62827638e-05,
		-1.00353203e-05, -3.44536253e-06, 3.55752761e-06,
		1.10453848e-05, 1.90917113e-05, 2.77713237e-05,
		3.71601936e-05, 4.73352854e-05, 5.83743884e-05,
		7.03559465e-05, 8.33588831e-05, 9.74624240e-05,
		1.12745917e-04, 1.29288648e-04, 1.47169659e-04,
		1.66467559e-04, 1.87260337e-04, 2.09625175e-04,
		2.33638257e-04, 2.59374582e-04, 2.86907773e-04,
		3.16309893e-04, 3.47651252e-04, 3.81000231e-04,
		4.16423089e-04, 4.53983790e-04, 4.93743820e-04,
		5.35762016e-04, 5.80094393e-04, 6.26793976e-04,
		6.75910638e-04, 7.27490944e-04, 7.81577994e-04,
		8.38211278e-04, 8.97426534e-04, 9.59255613e-04,
		1.02372635e-03, 1.09086243e-03, 1.16068329e-03,
		1.23320402e-03, 1.30843522e-03, 1.38638295e-03,
		1.46704864e-03, 1.55042897e-03, 1.63651587e-03,
		1.72529642e-03, 1.81675281e-03, 1.91086228e-03,
		2.00759715e-03, 2.10692471e-03, 2.20880728e-03,
		2.31320219e-03, 2.42006175e-03, 2.52933331e-03,
		2.64095929e-03, 2.75487718e-03, 2.87101959e-03,
		2.98931436e-03, 3.10968455e-03, 3.23204858e-03,
		3.35632025e-03, 3.48240891e-03, 3.61021950e-03,
		3.73965269e-03, 3.87060499e-03, 4.00296890e-03,
		4.13663302e-03, 4.27148222e-03, 4.40739779e-03,
		4.54425758e-03, 4.68193622e-03, 4.82030524e-03,
		4.95923329e-03, 5.09858633e-03, 5.23822780e-03,
		5.37801886e-03, 5.51781858e-03, 5.65748414e-03,
		5.79687107e-03, 5.93583347e-03, 6.07422423e-03,
		6.21189527e-03, 6.34869774e-03, 6.48448232e-03,
		6.61909938e-03, 6.75239931e-03, 6.88423267e-03,
		7.01445048e-03, 7.14290449e-03, 7.26944734e-03,
		7.39393290e-03, 7.51621644e-03, 7.63615488e-03,
		7.75360707e-03, 7.86843397e-03, 7.98049892e-03,
		8.08966786e-03, 8.19580954e-03, 8.29879578e-03,
		8.39850163e-03, 8.49480563e-03, 8.58759000e-03,
		8.67674084e-03, 8.76214831e-03, 8.84370685e-03,
		8.92131533e-03, 8.99487725e-03, 9.06430087e-03,
		9.12949940e-03, 9.19039115e-03, 9.24689965e-03,
		9.29895378e-03, 9.34648792e-03, 9.38944205e-03,
		9.42776183e-03, 9.46139876e-03, 9.49031016e-03,
		9.51445936e-03, 9.53381567e-03, 9.54835448e-03,
		9.55805732e-03, 9.56291183e-03, 9.56291183e-03,
		9.55805732e-03, 9.54835448e-03, 9.53381567e-03,
		9.51445936e-03, 9.49031016e-03, 9.46139876e-03,
		9.42776183e-03, 9.38944205e-03, 9.34648792e-03,
		9.29895378e-03, 9.24689965e-03, 9.19039115e-03,
		9.12949940e-03, 9.06430087e-03, 8.99487725e-03,
		8.92131533e-03, 8.84370685e-03, 8.76214831e-03,
		8.67674084e-03, 8.58759000e-03, 8.49480563e-03,
		8.39850163e-03, 8.29879578e-03, 8.19580954e-03,
		8.08966786e-03, 7.98049892e-03, 7.86843397e-03,
		7.75360707e-03, 7.63615488e-03, 7.51621644e-03,
		7.39393290e-03, 7.26944734e-03, 7.14290449e-03,
		7.01445048e-03, 6.88423267e-03, 6.75239931e-03,
		6.61909938e-03, 6.48448232e-03, 6.34869774e-03,
		6.21189527e-03, 6.07422423e-03, 5.93583347e-03,
		5.79687107e-03, 5.65748414e-03, 5.51781858e-03,
		5.37801886e-03, 5.23822780e-03, 5.09858633e-03,
		4.95923329e-03, 4.82030524e-03, 4.68193622e-03,
		4.54425758e-03, 4.40739779e-03, 4.27148222e-03,
		4.13663302e-03, 4.00296890e-03, 3.87060499e-03,
		3.73965269e-03, 3.61021950e-03, 3.48240891e-03,
		3.35632025e-03, 3.23204858e-03, 3.10968455e-03,
		2.98931436e-03, 2.87101959e-03, 2.75487718e-03,
		2.64095929e-03, 2.52933331e-03, 2.42006175e-03,
		2.31320219e-03, 2.20880728e-03, 2.10692471e-03,
		2.00759715e-03, 1.91086228e-03, 1.81675281e-03,
		1.72529642e-03, 1.63651587e-03, 1.55042897e-03,
		1.46704864e-03, 1.38638295e-03, 1.30843522e-03,
		1.23320402e-03, 1.16068329e-03, 1.09086243e-03,
		1.02372635e-03, 9.59255613e-04, 8.97426534e-04,
		8.38211278e-04, 7.81577994e-04, 7.27490944e-04,
		6.75910638e-04, 6.26793976e-04, 5.80094393e-04,
		5.35762016e-04, 4.93743820e-04, 4.53983790e-04,
		4.16423089e-04, 3.81000231e-04, 3.47651252e-04,
		3.16309893e-04, 2.86907773e-04, 2.59374582e-04,
		2.33638257e-04, 2.09625175e-04, 1.87260337e-04,
		1.66467559e-04, 1.47169659e-04, 1.29288648e-04,
		1.12745917e-04, 9.74624240e-05, 8.33588831e-05,
		7.03559465e-05, 5.83743884e-05, 4.73352854e-05,
		3.71601936e-05, 2.77713237e-05, 1.90917113e-05,
		1.10453848e-05, 3.55752761e-06, -3.44536253e-06,
		-1.00353203e-05, -1.62827638e-05, -2.22563515e-05,
		-2.80228441e-05, -3.36469731e-05, -3.91913150e-05,
		-4.47161718e-05,
	}
	lpf.Weights = fir[:]
	return
}

//func main() {

//	bpf := moodBPF()
//	step := [...]float64{
//		0, 0, 0,
//		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
//		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
//		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
//	}
//	var cap1 Capture
//	cap1.Amplitude = step[:]

//	n := len(cap1.Amplitude)
//	fmt.Println(cap1.Amplitude[0 : n-1])
//	fmt.Println(cap1.Amplitude[1:])

//	for i := 0; i < 32; i++ {
//		sample := moodBPFSample(&cap1, &bpf)
//		moodAppend(&cap1, sample)
//	}

//	fmt.Println(cap1)

//}
